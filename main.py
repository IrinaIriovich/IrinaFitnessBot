from keep_alive import keep_alive
from telegram.ext import ContextTypes
from datetime import datetime, timedelta, timezone, time as dt_time
import random
# üí¨ –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è
async def send_random_inspiration(context: ContextTypes.DEFAULT_TYPE):
    phrase = random.choice(inspiration_phrases)
    await context.bot.send_message(chat_id=191224401, text=f"‚ú® {phrase}")
# üß© –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ job_queue –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
async def setup_jobqueue(app):
    if not hasattr(app, "job_queue") or app.job_queue is None:
        print("[ERROR] job_queue is not available.")
        return

    print(f"[DEBUG] job_queue initialized: {app.job_queue is not None}")

    #schedule_inspiration_job(app)
    from pytz import timezone
    moscow_tz = timezone("Europe/Moscow")

    app.job_queue.run_daily(
        auto_what_was_message,
        time=dt_time(hour=9, minute=30, tzinfo=moscow_tz),
        name="auto_what_was"
    )
    print(f"[DEBUG] app.job_queue is available: {hasattr(app, 'job_queue') and app.job_queue is not None}")

# ‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å —Ä–∞–Ω–¥–æ–º–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º (10:00‚Äì23:00) –ø–æ –ú–æ—Å–∫–≤–µ
from pytz import timezone

def schedule_next_inspiration(application):
    tz = timezone("Europe/Moscow")
    now = datetime.now(tz)
    hour = random.randint(10, 22)
    minute = random.randint(1, 59)
    next_time = now.replace(hour=hour, minute=minute, second=0, microsecond=0)
    if next_time < now:
        next_time += timedelta(days=1)

    delay = (next_time - now).total_seconds()
    print(f"[‚úî] –°–ª–µ–¥—É—é—â–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ {next_time.strftime('%H:%M')} –ø–æ –ú–æ—Å–∫–≤–µ")
    application.job_queue.run_once(send_random_inspiration, when=delay)

async def send_random_inspiration(context: ContextTypes.DEFAULT_TYPE):
    phrase = random.choice(inspiration_phrases)
    for user_id in context.bot_data.get("users", []):
        await context.bot.send_message(chat_id=user_id, text=f"‚ú® {phrase}")
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    schedule_next_inspiration(context.application)

# main.py
import logging
from datetime import datetime, time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackContext, MessageHandler, filters, CallbackQueryHandler
import requests
# –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–∞–±–æ—á–∏–π Web Apps —Å–∫—Ä–∏–ø—Ç Google Apps Script
GOOGLE_SCRIPT_URL = "https://script.google.com/macros/s/AKfycbxBWSJgOMLcLqHD6DsC9LKjRxtdjsSUvr_r-VFCx1Pxu9ZX7a93ZDwoBDTqtGi3bPeJ/exec"
# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_keyboard():
    keyboard = [
        [KeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"), KeyboardButton("üèÉ –í–Ω–µ–ø–ª–∞–Ω–æ–≤–∞—è")],
        [KeyboardButton("‚ùì –ß—Ç–æ –±—ã–ª–æ"), KeyboardButton("üìä –û—Ç—á—ë—Ç")],
        [KeyboardButton("ü´∂ –ù–∞—Å—Ç—Ä–æ–π—Å—è –Ω–∞ —Å–µ–±—è")],
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
# –û—Ç–≤–µ—Ç–Ω—ã–µ —Ñ—Ä–∞–∑—ã
replies_positive = [
    "–¢—ã —Å—É–ø–µ—Ä! üî•", "–ú–æ–ª–æ–¥–µ—Ü! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å üí•", "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üëç",
    "–£—Ä–∞! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üí™", "–¢—ã —Å–¥–µ–ª–∞–ª–∞ —ç—Ç–æ! üíØ", "–í–æ—Ç —ç—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π! üëè"
]
replies_partial = [
    "–ù–µ–ø–ª–æ—Ö–æ! –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ ‚Äî –µ—â—ë –ª—É—á—à–µ üí°", "–¢—ã –Ω–∞ –ø—É—Ç–∏ –∫ —Ü–µ–ª–∏ üí´",
    "–ß–∞—Å—Ç–∏—á–Ω–æ ‚Äî —Ç–æ–∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç! üë£", "–ì–ª–∞–≤–Ω–æ–µ ‚Äî –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è üå±"
]
replies_negative = [
    "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî –±—ã–≤–∞–µ—Ç. –ó–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç —à–∞–Ω—Å —Å–Ω–æ–≤–∞ ‚ú®",
    "–ì–ª–∞–≤–Ω–æ–µ ‚Äî –Ω–µ —Å–¥–∞–≤–∞—Ç—å—Å—è! üí™",
    "–î–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ –∏–¥–µ–∞–ª—å–Ω–æ üß≠"
]
GUIDES = {
    "–ë—ë—Ä–ø–∏": "ü§∏‚Äç‚ôÄÔ∏è –ü—Ä–∏—Å–µ–¥ ‚Üí –æ–ø–æ—Ä–∞ –Ω–∞ —Ä—É–∫–∏ ‚Üí –æ—Ç–∂–∏–º–∞–Ω–∏–µ ‚Üí –ø—Ä—ã–∂–æ–∫. –î–µ—Ä–∂–∏ –∫–æ—Ä–ø—É—Å —Ä–æ–≤–Ω—ã–º, –ø—Ä–∏–∑–µ–º–ª—è–π—Å—è –º—è–≥–∫–æ.",
    "–ê–ª—å–ø–∏–Ω–∏—Å—Ç": "‚õ∞ –£–ø–æ—Ä –ª—ë–∂–∞, –∫–æ–ª–µ–Ω–∏ –ø–æ–æ—á–µ—Ä—ë–¥–Ω–æ –∫ –≥—Ä—É–¥–∏. –ü—Ä–µ—Å—Å ‚Äî –≤ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–∏!",
    "–ë–µ–≥ –Ω–∞ –º–µ—Å—Ç–µ": "üèÉ –ü–æ–¥–Ω–∏–º–∞–π –∫–æ–ª–µ–Ω–∏ –≤—ã—à–µ, —Ä—É–∫–∏ ‚Äî –∞–∫—Ç–∏–≤–Ω–æ. –¢–µ–º–ø —É–≤–µ—Ä–µ–Ω–Ω—ã–π!",
    "–ü—Ä—ã–∂–∫–∏ –∑–≤–µ–∑–¥–∞": "‚≠ê –ü—Ä—ã–∂–æ–∫ —Å —Ä–∞–∑–≤–µ–¥–µ–Ω–∏–µ–º —Ä—É–∫ –∏ –Ω–æ–≥. –ú—è–≥–∫–æ –ø—Ä–∏–∑–µ–º–ª—è–π—Å—è.",
    "–°–∫–∞–ª–æ–ª–∞–∑": "üßó –ë—ã—Å—Ç—Ä–æ –∏ —Ä–∏—Ç–º–∏—á–Ω–æ, –Ω–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ –ø—Ä–µ—Å—Å!",
    "–í—ã—Å–æ–∫–∏–µ –∫–æ–ª–µ–Ω–∏": "üí• –ö–æ–ª–µ–Ω–∏ –≤—ã—à–µ –ø–æ—è—Å–∞, –¥—ã—Ö–∞–Ω–∏–µ ‚Äî –Ω–µ —Å–±–∏–≤–∞–π.",
    "–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è": "ü¶µ –ö–æ–ª–µ–Ω–∏ –Ω–µ –≤—ã—Ö–æ–¥—è—Ç –∑–∞ –Ω–æ—Å–∫–∏, —Å–ø–∏–Ω–∞ –ø—Ä—è–º–∞—è. –î–≤–∏–∂–µ–Ω–∏–µ –æ—Ç —Ç–∞–∑–∞.",
    "–û—Ç–∂–∏–º–∞–Ω–∏—è": "üí™ –ö–æ—Ä–ø—É—Å —Ä–æ–≤–Ω—ã–π, –ª–æ–∫—Ç–∏ –ø–æ–¥ 45¬∞. –ú–æ–∂–Ω–æ —Å –∫–æ–ª–µ–Ω.",
    "–£–∑–∫–∏–µ –æ—Ç–∂–∏–º–∞–Ω–∏—è": "üéØ –õ–æ–∫—Ç–∏ –±–ª–∏–∑–∫–æ –∫ —Ç–µ–ª—É ‚Äî —Ç—Ä–∏—Ü–µ–ø—Å –≤–∫–ª—é—á–∞–µ—Ç—Å—è!",
    "–í—ã–ø–∞–¥—ã": "üö∂‚Äç‚ôÄÔ∏è –ö–æ–ª–µ–Ω–æ –Ω–∞–¥ –ø—è—Ç–∫–æ–π, –¥–µ—Ä–∂–∏ –±–∞–ª–∞–Ω—Å.",
    "–Ø–≥–æ–¥–∏—á–Ω—ã–π –º–æ—Å—Ç": "üçë –ü–æ–¥—ä—ë–º —Ç–∞–∑–∞ –∑–∞ —Å—á—ë—Ç —è–≥–æ–¥–∏—Ü, –Ω–µ –ø—Ä–æ–≥–∏–±–∞–π –ø–æ—è—Å–Ω–∏—Ü—É.",
    "–ú–∞—Ö–∏ –Ω–æ–≥–∞–º–∏": "üë¢ –ù–∞–∑–∞–¥ —Å —É—Å–∏–ª–∏–µ–º, –∫–æ—Ä–ø—É—Å –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω.",
    "–°—É–ø–µ—Ä–º–µ–Ω": "ü¶∏ –õ—ë–∂–∞ ‚Äî –ø–æ–¥–Ω–∏–º–∞–π —Ä—É–∫–∏ –∏ –Ω–æ–≥–∏. –ü–æ—è—Å–Ω–∏—Ü–∞ –Ω–µ –ø–µ—Ä–µ–≥–∏–±–∞–µ—Ç—Å—è.",
    "–ì—É–¥–º–æ—Ä–Ω–∏–Ω–≥": "üßç‚Äç‚ôÄÔ∏è –ù–∞–∫–ª–æ–Ω —Å –ø—Ä—è–º–æ–π —Å–ø–∏–Ω–æ–π. –¢—è–Ω–µ—Ç—Å—è –∑–∞–¥–Ω—è—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –±–µ–¥—Ä–∞.",
    "–°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è": "üåÄ –ü–æ–¥–±–æ—Ä–æ–¥–æ–∫ –≤–≤–µ—Ä—Ö, –ø–æ—è—Å–Ω–∏—Ü–∞ –Ω–∞ –ø–æ–ª—É. –ë–µ–∑ —Ä—ã–≤–∫–æ–≤.",
    "–†—É—Å—Å–∫–∏–π —Ç–≤–∏—Å—Ç": "ü™ë –ü–æ–≤–æ—Ä–æ—Ç—ã –∫–æ—Ä–ø—É—Å–∞, –∫–æ—Å—ã–µ –º—ã—à—Ü—ã –≤–∫–ª—é—á–∞—é—Ç—Å—è!",
    "–ù–æ–∂–Ω–∏—Ü—ã": "‚úÇÔ∏è –ü—Ä—è–º—ã–µ –Ω–æ–≥–∏, –Ω–µ –æ—Ç—Ä—ã–≤–∞–π –ø–æ—è—Å–Ω–∏—Ü—É.",
    "–°–∫–ª–∞–¥–∫–∞": "üìê –†—É–∫–∏ –∏ –Ω–æ–≥–∏ –Ω–∞–≤—Å—Ç—Ä–µ—á—É, –≤—ã–¥–æ—Ö ‚Äî –≤–≤–µ—Ä—Ö.",
    "–í–µ–ª–æ—Å–∏–ø–µ–¥": "üö¥‚Äç‚ôÄÔ∏è –†–∏—Ç–º —Å—Ä–µ–¥–Ω–∏–π, –ª–æ–∫–æ—Ç—å ‚Äî –∫ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–º—É –∫–æ–ª–µ–Ω—É.",
    "–ü–ª–∞–Ω–∫–∞": "üìè –õ–æ–∫—Ç–∏ –ø–æ–¥ –ø–ª–µ—á–∞–º–∏, –Ω–µ –ø—Ä–æ–≥–∏–±–∞–π—Å—è –≤ —Å–ø–∏–Ω–µ.",
    "–ü–ª–∞–Ω–∫–∞ –±–æ–∫–æ–≤–∞—è": "‚ÜîÔ∏è –ë—ë–¥—Ä–∞ –Ω–∞ –ª–∏–Ω–∏–∏, –ª–æ–∫–æ—Ç—å –ø–æ–¥ –ø–ª–µ—á–æ–º.",
    "–ü–ª–∞–Ω–∫–∞ —Å –∫–∞—Å–∞–Ω–∏–µ–º –ø–ª–µ—á": "ü§∏ –°—Ç–∞—Ä–∞–π—Å—è –Ω–µ —Ä–∞—Å–∫–∞—á–∏–≤–∞—Ç—å—Å—è –ø—Ä–∏ –∫–∞—Å–∞–Ω–∏–∏.",
    "–ú–µ–¥–≤–µ–∂–∏–π —à–∞–≥": "üêª –ö–æ–ª–µ–Ω–∏ –Ω–∞–¥ –ø–æ–ª–æ–º, —Å–ø–∏–Ω–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø–æ–ª—É. –®–∞–≥–∞–π –ø–ª–∞–≤–Ω–æ.",
    "–í—ã–ø–∞–¥—ã —Å –∫–∞—Å–∞–Ω–∏–µ–º –ø–æ–ª–∞": "üñê –î–æ–±–∞–≤—å –ª—ë–≥–∫–æ–µ –∫–∞—Å–∞–Ω–∏–µ —Ä—É–∫–æ–π ‚Äî —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è.",
    "–ë–µ–≥ –Ω–∞ –º–µ—Å—Ç–µ —Å –ø–∞—É–∑–æ–π": "‚è∏ –ë–µ–≥ —Å –º–∏–∫—Ä–æ–ø–∞—É–∑–∞–º–∏. –ü—É–ª—å—Å –≤–≤–µ—Ä—Ö!",
    "–ù–∞–∫–ª–æ–Ω—ã –≤–ø–µ—Ä—ë–¥": "üßò‚Äç‚ôÄÔ∏è –¢—è–Ω–∏—Å—å –æ—Ç —Ç–∞–∑–∞, –Ω–µ —Å–∫—Ä—É–≥–ª—è–π —Å–ø–∏–Ω—É.",
    "–ë–∞–±–æ—á–∫–∞": "ü¶ã –ö–æ–ª–µ–Ω–∏ –∫ –ø–æ–ª—É, –Ω–µ —Ç–æ—Ä–æ–ø–∏—Å—å ‚Äî –¥—ã—Ö–∞–Ω–∏–µ —Ä–æ–≤–Ω–æ–µ.",
    "–®–ø–∞–≥–∞—Ç –∏–ª–∏ –∫ –Ω–µ–º—É": "‚ö†Ô∏è –¢–æ–ª—å–∫–æ –≤ –∫–æ–º—Ñ–æ—Ä—Ç ‚Äî –Ω–∏–∫–∞–∫–∏—Ö —Ä—ã–≤–∫–æ–≤!",
    "–ö–æ—à–∫–∞-–∫–æ—Ä–æ–≤–∞": "üêà –°–ø–∏–Ω–∞ ‚Äî –≤—ã–≥–∏–±–∞–π –∏ –ø—Ä–æ–≥–∏–±–∞–π. –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å –¥—ã—Ö–∞–Ω–∏–µ–º.",
    "–ü–æ–≤–æ—Ä–æ—Ç—ã –∫–æ—Ä–ø—É—Å–∞ –ª—ë–∂–∞": "üå™ –ü–ª–∞–≤–Ω–æ, –∫–æ–ª–µ–Ω–∏ –≤–º–µ—Å—Ç–µ, —Ç–∞–∑ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω.",
    "–†–∞—Å—Ç—è–∂–∫–∞ –Ω–∞ —Å–ø–∏–Ω—É": "üåô –ö–æ–ª–µ–Ω–∏ –∫ –≥—Ä—É–¥–∏, –ø–µ—Ä–µ–∫–∞—Ç—ã ‚Äî –º—è–≥–∫–æ –∏ –ø—Ä–∏—è—Ç–Ω–æ."
}
inspiration_phrases = [
    "–°–µ–≥–æ–¥–Ω—è ‚Äî —Ö–æ—Ä–æ—à–∏–π –¥–µ–Ω—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å! üí™",
    "–ü—É—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç —Ç–æ—Ç –¥–µ–Ω—å, –∫–æ–≥–¥–∞ —Ç—ã —Å–æ–±–æ–π –≥–æ—Ä–¥–∏—à—å—Å—è ‚ú®",
    "–ö–∞–∂–¥–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ ‚Äî –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ —Å–µ–±—è üìà",
    "–°–¥–µ–ª–∞–π —ç—Ç–æ –¥–ª—è —Å–µ–±—è. –ê –µ—â—ë –¥–ª—è –∫—Ä–∞—Å–∏–≤—ã—Ö —Ñ–æ—Ç–æ–∫ üòâ",
    "–ï—Å–ª–∏ –Ω–µ —Å–µ–π—á–∞—Å ‚Äî —Ç–æ –∫–æ–≥–¥–∞? –ê —Ç—ã —É–∂–µ –≤ –ø—É—Ç–∏. üöÄ",
    "–ó–∞–≤—Ç—Ä–∞ —Ç—ã –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—à—å —Å–µ–±—è –∑–∞ —ç—Ç–æ —Ä–µ—à–µ–Ω–∏–µ üíö",
    "–¢—ã –Ω–µ –æ–±—è–∑–∞–Ω–∞ –±—ã—Ç—å —Å—É–ø–µ—Ä–≥–µ—Ä–æ–µ–º. –ù–æ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–æ—Å—Ç—é–º —Ç–µ–±–µ –∫ –ª–∏—Ü—É ü¶∏‚Äç‚ôÄÔ∏è", 
    "–ì–ª–∞–≤–Ω–æ–µ ‚Äî –Ω–µ –∏–¥–µ–∞–ª—å–Ω–æ, –∞ —Ä–µ–≥—É–ª—è—Ä–Ω–æ. –î–∞–∂–µ –µ—Å–ª–∏ –≤ –ø–∏–∂–∞–º–µ üìÜ", 
    "–£—Å—Ç–∞–ª–æ—Å—Ç—å –ø—Ä–æ–π–¥—ë—Ç, –∞ —Ä–∞–¥–æ—Å—Ç—å –∑–∞ —Å–µ–±—è –æ—Å—Ç–∞–Ω–µ—Ç—Å—è. –ù—É –∏–ª–∏ –∫—Ä–µ–ø–∞—Ç—É—Ä–∞ üí™",
    "–ö—Ä–∞—Å–∏–≤—ã–π –ø—Ä–µ—Å—Å –Ω–µ –≥–ª–∞–≤–Ω–æ–µ. –ì–ª–∞–≤–Ω–æ–µ ‚Äî –Ω–µ –æ—Ç–∂–∏–º–∞—Ç—å—Å—è –æ—Ç —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ ü§∏", 
    "–¢–≤–æ—ë —Ç–µ–ª–æ —Å–∫–∞–∂–µ—Ç —Å–ø–∞—Å–∏–±–æ. –ù—É... –º–æ–∂–µ—Ç, –Ω–µ —Å—Ä–∞–∑—É üßò", 
    "–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π —Ç—ã ‚Äî –∞–ø–≥—Ä–µ–π–¥ –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ üîÅ", 
    "–î–∞–∂–µ —Å—É–ø–µ—Ä–≥–µ—Ä–æ–∏ –¥–µ–ª–∞—é—Ç –ø–µ—Ä–µ—Ä—ã–≤ –Ω–∞ —Ä–∞—Å—Ç—è–∂–∫—É ü¶∏‚Äç‚ôÇÔ∏è", 
    "–£–¥–∞–ª–æ—Å—å –ª–∏ —Å–µ–≥–æ–¥–Ω—è –Ω–µ–º–Ω–æ–≥–æ –ø–æ–±—ã—Ç—å —Å —Å–æ–±–æ–π? –î–∞–∂–µ 1 –¥–≤–∏–∂–µ–Ω–∏–µ ‚Äî —É–∂–µ –∫–æ–Ω—Ç–∞–∫—Ç üßò"
]

SUPPORT_PHRASES = [
    "–¢—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∞ –ø–µ—Ä–≤—ã–π —à–∞–≥ ‚Äî –∞ —ç—Ç–æ –≥–ª–∞–≤–Ω–æ–µ üå±",
    "–ö–æ–≥–¥–∞ —Ç—ã —Ä—è–¥–æ–º —Å —Å–æ–±–æ–π ‚Äî –≤—Å—ë —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω—ã–º üí´",
    "–í —Ç–∏—à–∏–Ω–µ —Ä–æ–∂–¥–∞–µ—Ç—Å—è —Å–∏–ª–∞. –¢—ã —Å –Ω–µ–π –Ω–∞ —Å–≤—è–∑–∏ ü§ç",
    "–ù–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ –¥–æ–∫–∞–∑—ã–≤–∞—Ç—å. –ü—Ä–æ—Å—Ç–æ –±—É–¥—å —Å–æ–±–æ–π ‚òÄÔ∏è",
    "–≠—Ç–æ –º–∞–ª–µ–Ω—å–∫–æ–µ –∫–∞—Å–∞–Ω–∏–µ –∫ —Å–µ–±–µ ‚Äî –∫–∞–∫ –≥–ª—É–±–æ–∫–∏–π –≤–¥–æ—Ö üå¨",
    "–°–µ–≥–æ–¥–Ω—è —Ç—ã –≤—ã–±—Ä–∞–ª–∞ –∑–∞–±–æ—Ç—É. –ò —ç—Ç–æ –≤—Å–µ–≥–¥–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ üßò",
    "–¢—ã –∑–¥–µ—Å—å. –≠—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üåç",
    "–ù–∞—Å—Ç—Ä–æ–π –ø—Ä–∏—Ö–æ–¥–∏—Ç –Ω–µ –∏–∑–≤–Ω–µ ‚Äî –æ–Ω —É–∂–µ –≤–Ω—É—Ç—Ä–∏ ‚ú®",
    "–¢—ã —É–º–µ–µ—à—å –±—ã—Ç—å —Å —Å–æ–±–æ–π. –ò —ç—Ç–æ —Ç–≤–æ—è —Å—É–ø–µ—Ä—Å–∏–ª–∞ üíö"
]

MICRO_PRACTICES = [
    "–ó–∞–∫—Ä–æ–π –≥–ª–∞–∑–∞ –Ω–∞ 10 —Å–µ–∫—É–Ω–¥ –∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—ã—à–∏ üå¨",
    "–ü–æ—á—É–≤—Å—Ç–≤—É–π, –∫–∞–∫ —Å—Ç–æ–ø—ã –∫–∞—Å–∞—é—Ç—Å—è –ø–æ–ª–∞ üë£",
    "–ü–æ–∫—Ä—É—Ç–∏ –ø–ª–µ—á–∞–º–∏ –Ω–∞–∑–∞–¥ –∏ –≤–ø–µ—Ä—ë–¥, –º–µ–¥–ª–µ–Ω–Ω–æ üîÑ",
    "–°–¥–µ–ª–∞–π –≥–ª—É–±–æ–∫–∏–π –≤–¥–æ—Ö –Ω–∞ 4, –≤—ã–¥–æ—Ö –Ω–∞ 6 ‚Äî —Ç—Ä–∏–∂–¥—ã üåø",
    "–ü–æ–ª–æ–∂–∏ –ª–∞–¥–æ–Ω—å –Ω–∞ –≥—Ä—É–¥—å –∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–±—É–¥—å —Ç–∞–∫ ü§≤",
    "–ü–æ—Ç—Ä–æ–≥–∞–π —Å–≤–æ–∏ –ª–∞–¥–æ–Ω–∏. –ü–æ—á—É–≤—Å—Ç–≤—É–π –∏—Ö —Ç–µ–ø–ª–æ üñêÔ∏è",
    "–°–º–æ—Ç—Ä–∏ –≤ –æ–∫–Ω–æ 15 —Å–µ–∫—É–Ω–¥. –ü—Ä–æ—Å—Ç–æ –±—É–¥—å ü™ü",
    "–ü–æ—á—É–≤—Å—Ç–≤—É–π –æ–ø–æ—Ä—É –ø–æ–¥ —Ç–µ–ª–æ–º ‚Äî —Ç—ã –∑–¥–µ—Å—å üìç",
    "–°–¥–µ–ª–∞–π –ª—ë–≥–∫–∏–π –Ω–∞–∫–ª–æ–Ω –≥–æ–ª–æ–≤—ã –≤ —Å—Ç–æ—Ä–æ–Ω—É –∏ –∑–∞–¥–µ—Ä–∂–∏—Å—å üßò",
    "–ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–π 30 —Å–µ–∫—É–Ω–¥. –≠—Ç–æ —Ç–æ–∂–µ –∑–∞–±–æ—Ç–∞ ü´ñ"
]

morning_greetings = [
    "‚òÄÔ∏è –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –°–µ–≥–æ–¥–Ω—è —Ç—ã ‚Äî —Å–≤–æ–π –≥–ª–∞–≤–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç. –í–æ—Ç —á—Ç–æ –¥–ª—è —Ç–µ–±—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–æ:",
    "üåø –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ù–∞—á–Ω–∏ –¥–µ–Ω—å —Å –¥–≤–∏–∂–µ–Ω–∏—è ‚Äî –º—è–≥–∫–æ, —Å –∑–∞–±–æ—Ç–æ–π –æ —Å–µ–±–µ:",
    "üî• –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ—Ç –¥–µ–Ω—å –±–æ–¥—Ä—ã–º ‚Äî –Ω–∞—á–Ω—ë–º —Å –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —Ä–∏—Ç—É–∞–ª–∞:",
    "üå± –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –í—Å—ë, —á—Ç–æ –Ω—É–∂–Ω–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞—á–∞—Ç—å. –í–æ—Ç —Å —á–µ–≥–æ:",
    "üí´ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –î—ã—à–∏–º, –¥–≤–∏–≥–∞–µ–º—Å—è, –∂–∏–≤—ë–º. –°–µ–≥–æ–¥–Ω—è ‚Äî –¥–µ–Ω—å —Å —Ç–µ–ª–æ–º:",
    "‚òï –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –¢–≤–æ—ë —É—Ç—Ä–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø—Ä–æ—Å—Ç–æ–≥–æ —à–∞–≥–∞ –∫ —Å–µ–±–µ:",
    "üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ. –î–∞–≤–∞–π –º—è–≥–∫–æ –≤—Å—Ç—Ä–µ—Ç–∏–º —ç—Ç–æ—Ç –¥–µ–Ω—å. –í–æ—Ç —á—Ç–æ –ø–æ–º–æ–∂–µ—Ç:",
    "üíõ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –¢–≤–æ—ë —Ç–µ–ª–æ –±—É–¥–µ—Ç –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ –∑–∞ —ç—Ç–∏ 10 –º–∏–Ω—É—Ç –∑–∞–±–æ—Ç—ã:",
]

def format_workout_with_guides(workout):
    formatted = []
    for i, w in enumerate(workout):
        base = f"{i+1}. {w}"
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        base_name = str(w).split(" 3√ó")[0].split("√ó")[0].strip()
        for key in GUIDES:
            if base_name in key:
                base += f"\n {GUIDES[key]}"
                break
        formatted.append(base)
    return "\n\n".join(formatted)
def get_random_workout():
    import random
    valid_days = [WEEKLY_PLAN[i][1] for i in WEEKLY_PLAN if WEEKLY_PLAN[i][1]]
    return random.choice(valid_days) if valid_days else []
def get_response_keyboard():
    keyboard = [
        [
            InlineKeyboardButton("üí™ –î–∞", callback_data="response_–¥–∞"),
            InlineKeyboardButton("ü§è –ß–∞—Å—Ç–∏—á–Ω–æ", callback_data="response_—á–∞—Å—Ç–∏—á–Ω–æ"),
            InlineKeyboardButton("ü´† –ù–µ—Ç", callback_data="response_–Ω–µ—Ç"),
        ]
    ]
    return InlineKeyboardMarkup(keyboard)
# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
WEEKLY_PLAN = {
        0: ("–ö–∞—Ä–¥–∏–æ", [
            ["–ë—ë—Ä–ø–∏ 3√ó10", "–ê–ª—å–ø–∏–Ω–∏—Å—Ç 3√ó20", "–ë–µ–≥ –Ω–∞ –º–µ—Å—Ç–µ 3√ó2 –º–∏–Ω"],
            ["–ü—Ä—ã–∂–∫–∏ –∑–≤–µ–∑–¥–∞ 3√ó20", "–°–∫–∞–ª–æ–ª–∞–∑ 3√ó30 —Å–µ–∫", "–í—ã—Å–æ–∫–∏–µ –∫–æ–ª–µ–Ω–∏ 3√ó40 —Å–µ–∫"]
        ]),
        1: ("–° —Ç—Ä–µ–Ω–µ—Ä–æ–º", []),
        2: ("–°–∏–ª–æ–≤–∞—è", [
            ["–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è 3√ó15", "–û—Ç–∂–∏–º–∞–Ω–∏—è 3√ó10", "–ú–∞—Ö–∏ –Ω–æ–≥–∞–º–∏ 3√ó20"],
            ["–í—ã–ø–∞–¥—ã 3√ó12", "–£–∑–∫–∏–µ –æ—Ç–∂–∏–º–∞–Ω–∏—è 3√ó8", "–Ø–≥–æ–¥–∏—á–Ω—ã–π –º–æ—Å—Ç 3√ó20"],
            ["–°—É–ø–µ—Ä–º–µ–Ω 3√ó20", "–ü—Ä–∏—Å–µ–¥ —Å –ø–æ–¥—ä—ë–º–æ–º —Ä—É–∫–∏ 3√ó12", "–ì—É–¥–º–æ—Ä–Ω–∏–Ω–≥ 3√ó15"]
        ]),
        3: ("–ü—Ä–µ—Å—Å", [
            ["–°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è 3√ó20", "–ü–ª–∞–Ω–∫–∞ 3√ó30 —Å–µ–∫", "–ê–ª—å–ø–∏–Ω–∏—Å—Ç 3√ó20"],
            ["–†—É—Å—Å–∫–∏–π —Ç–≤–∏—Å—Ç 3√ó30", "–ü–ª–∞–Ω–∫–∞ –±–æ–∫–æ–≤–∞—è 3√ó20", "–ù–æ–∂–Ω–∏—Ü—ã 3√ó30"],
            ["–°–∫–ª–∞–¥–∫–∞ 3√ó15", "–ü–ª–∞–Ω–∫–∞ —Å –∫–∞—Å–∞–Ω–∏–µ–º –ø–ª–µ—á 3√ó20", "–í–µ–ª–æ—Å–∏–ø–µ–¥ 3√ó40 —Å–µ–∫"]
        ]),
        4: ("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è", [
            ["–ü—Ä—ã–∂–∫–∏ –∑–≤–µ–∑–¥–∞ 3√ó20", "–ú–µ–¥–≤–µ–∂–∏–π —à–∞–≥ 3√ó1 –º–∏–Ω", "–ü–ª–∞–Ω–∫–∞ 3√ó45 —Å–µ–∫"],
            ["–ë—ë—Ä–ø–∏ 3√ó10", "–í—ã–ø–∞–¥—ã —Å –∫–∞—Å–∞–Ω–∏–µ–º –ø–æ–ª–∞ 3√ó12", "–ë–µ–≥ –Ω–∞ –º–µ—Å—Ç–µ —Å –ø–∞—É–∑–æ–π 3√ó40 —Å–µ–∫"]
        ]),
        5: ("–†–∞—Å—Ç—è–∂–∫–∞", [
            ["–ù–∞–∫–ª–æ–Ω—ã –≤–ø–µ—Ä—ë–¥", "–ë–∞–±–æ—á–∫–∞", "–®–ø–∞–≥–∞—Ç –∏–ª–∏ –∫ –Ω–µ–º—É"],
            ["–ö–æ—à–∫–∞-–∫–æ—Ä–æ–≤–∞", "–ü–æ–≤–æ—Ä–æ—Ç—ã –∫–æ—Ä–ø—É—Å–∞ –ª—ë–∂–∞", "–†–∞—Å—Ç—è–∂–∫–∞ –Ω–∞ —Å–ø–∏–Ω—É"]
        ]),
        6: ("–°–≤–æ–±–æ–¥–Ω—ã–π –¥–µ–Ω—å", [])
    }
# –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
def get_daily_workout():
    day_index = datetime.now().weekday()
    _, options = WEEKLY_PLAN.get(day_index, ("", []))
    return random.choice(options) if options else []
# –ó–∞–ø–∏—Å—å –≤ Google –¢–∞–±–ª–∏—Ü—É
def send_to_gsheet(user_id, date_str, workout_type, response):
    logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Google –¢–∞–±–ª–∏—Ü—É: {user_id}, {date_str}, {workout_type}, {response}")
    data = {
        "user_id": user_id,
        "date": date_str,
        "workout_type": workout_type,
        "response": response
    }
    try:
        response_post = requests.post(GOOGLE_SCRIPT_URL, data=data, timeout=10)
        if response_post.status_code == 200:
            logging.info("–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Google –¢–∞–±–ª–∏—Ü—É.")
        else:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Google –¢–∞–±–ª–∏—Ü—É: –∫–æ–¥ {response_post.status_code}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Google –¢–∞–±–ª–∏—Ü—É: {e}")

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
async def start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if "users" not in context.bot_data:
        context.bot_data["users"] = set()
    context.bot_data["users"].add(user_id)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤–∞ –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ? üí™", reply_markup=get_main_keyboard())
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: CallbackContext):
    text = update.message.text
    user_id = update.effective_user.id
    date_str = datetime.now().strftime("%Y-%m-%d")
    if text == "‚ùì –ß—Ç–æ –±—ã–ª–æ":
        workout = get_daily_workout()
        if workout:
            formatted = format_workout_with_guides(workout)
            await update.message.reply_text(
                f"–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞:\n{formatted}\n–£–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å?",
                reply_markup=get_response_keyboard()
            )
            context.user_data["workout"] = workout
            context.user_data["date"] = date_str
            context.user_data["type"] = "–ø–ª–∞–Ω–æ–≤–∞—è"
    elif text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        schedule = "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é:"
        days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
        emoji_list = ["üèÉ‚Äç‚ôÇÔ∏è", "üßë‚Äçüè´", "üèãÔ∏è‚Äç‚ôÄÔ∏è", "üßò‚Äç‚ôÄÔ∏è", "ü§∏‚Äç‚ôÇÔ∏è", "üßò‚Äç‚ôÇÔ∏è", "üòå"]
        for i in range(7):
            name, _ = WEEKLY_PLAN[i]
            emoji = emoji_list[i]
            schedule += f"\n{days[i]} ‚Äî {name} {emoji}"
        await update.message.reply_text(
            schedule,
            reply_markup=get_main_keyboard()
        )
    elif text == "üèÉ –í–Ω–µ–ø–ª–∞–Ω–æ–≤–∞—è":
        workout_groups = get_random_workout()
        workout = random.choice(workout_groups) if workout_groups else []
        formatted = format_workout_with_guides(workout)
        await update.message.reply_text(
            f"–í–æ—Ç —Ç–≤–æ—è –≤–Ω–µ–ø–ª–∞–Ω–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞:\n{formatted}\n–£–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å?",
            reply_markup=get_response_keyboard()
        )
        context.user_data["workout"] = workout
        context.user_data["date"] = datetime.now().strftime("%Y-%m-%d")
        context.user_data["type"] = "–≤–Ω–µ–ø–ª–∞–Ω–æ–≤–∞—è"
    elif text == "üî• –ú–æ—Ç–∏–≤–∞—Ü–∏—è":
        phrase = random.choice(inspiration_phrases)
        await update.message.reply_text(f"‚ú® {phrase}")
    elif text.lower() in ["–¥–∞", "—á–∞—Å—Ç–∏—á–Ω–æ", "–Ω–µ—Ç"]:
        resp_type = context.user_data.get("type", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        send_to_gsheet(user_id, context.user_data.get("date", date_str), resp_type, text.lower())
        if text.lower() == "–¥–∞":
            msg = random.choice(replies_positive)
        elif text.lower() == "—á–∞—Å—Ç–∏—á–Ω–æ":
            msg = random.choice(replies_partial)
        else:
            msg = random.choice(replies_negative)
        await update.message.reply_text(msg, reply_markup=get_main_keyboard())
    elif text == "üìä –û—Ç—á—ë—Ç":
        user_id = update.effective_user.id
        await update.message.reply_text("üìä –§–æ—Ä–º–∏—Ä—É—é —Ç–≤–æ–π –æ—Ç—á—ë—Ç...")
        try:
            resp = requests.get(GOOGLE_SCRIPT_URL, params={"action": "report", "user_id": user_id}, timeout=10)
            if resp.status_code == 200:
                await update.message.reply_text(resp.text, reply_markup=get_main_keyboard())
            else:
                await update.message.reply_text("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=get_main_keyboard())
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")
            await update.message.reply_text(
    "‚ö†Ô∏è –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞. –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é.",
    reply_markup=get_main_keyboard()
            )
    elif text == "ü´∂ –ù–∞—Å—Ç—Ä–æ–π—Å—è –Ω–∞ —Å–µ–±—è":
        practice = random.choice(MICRO_PRACTICES)
        await update.message.reply_text(
            f"–ü–æ–ø—Ä–æ–±—É–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:\n\n{practice}",
    reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üìç –Ø –∑–¥–µ—Å—å", callback_data="support_done")],
            [InlineKeyboardButton("üë£ –ï—â—ë –æ–¥–∏–Ω —à–∞–≥ –∫ —Å–µ–±–µ", callback_data="more_practice")]
            ])
        )
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
async def handle_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    date_str = datetime.now().strftime("%Y-%m-%d")

    if query.data.startswith("response_"):
        response = query.data.replace("response_", "")
        workout_type = context.user_data.get("type", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        send_to_gsheet(user_id, context.user_data.get("date", date_str), workout_type, response)

        if response == "–¥–∞":
            msg = random.choice(replies_positive)
        elif response == "—á–∞—Å—Ç–∏—á–Ω–æ":
            msg = random.choice(replies_partial)
        else:
            msg = random.choice(replies_negative)

        await query.edit_message_text(text=msg)
        await context.bot.send_message(
            chat_id=user_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:",
            reply_markup=get_main_keyboard()
        )

    elif query.data == "support_done":
        phrase = random.choice(SUPPORT_PHRASES)
        await query.edit_message_text(f"{phrase}")

    elif query.data == "more_practice":
        new_practice = random.choice(MICRO_PRACTICES)
        await query.edit_message_text(
            f"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë –æ–¥–Ω—É –º–∏–∫—Ä–æ–ø—Ä–∞–∫—Ç–∏–∫—É:\n\n{new_practice}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìç–Ø –∑–¥–µ—Å—å", callback_data="support_done")],
                [InlineKeyboardButton("üë£ –ï—â—ë", callback_data="more_practice")]
            ])
        )
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "–ß—Ç–æ –±—ã–ª–æ" –≤ 9:45
async def auto_what_was_message(context: CallbackContext):
    for user_id in context.bot_data.get("users", []):
        workout = get_daily_workout()
        if workout:
            formatted = format_workout_with_guides(workout)
            await context.bot.send_message(
                chat_id=user_id,greeting = random.choice(morning_greetings)
text = f"{greeting}\n\n{formatted}\n–£–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å?",
                reply_markup=get_response_keyboard()
            )
            context.user_data["workout"] = workout
            context.user_data["date"] = datetime.now().strftime("%Y-%m-%d")
            context.user_data["type"] = "–ø–ª–∞–Ω–æ–≤–∞—è"
from telegram.ext import ApplicationBuilder, JobQueue

def main():
    application = Application.builder()\
        .token("7820484983:AAFy1bXpU8Zx0tvJCtOhgaIeYRKI6YL9WCg")\
        .post_init(setup_jobqueue)\
        .build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(handle_callback))
        
    application.run_polling()
import asyncio

if __name__ == "__main__":
    keep_alive()
    main()
