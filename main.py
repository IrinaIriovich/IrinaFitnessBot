import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
import datetime
import asyncio

TOKEN = "7820484983:AAEBNzPMjEBp1GF8YG5O3AdwBi_QiqWyWfQ"

user_log = {}
reply_keyboard = [["‚úÖ –î–∞", "‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ", "‚ùå –ù–µ—Ç"]]
markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-—Ç—Ä–µ–Ω–µ—Ä üí™")

async def morning_workout(context: ContextTypes.DEFAULT_TYPE):
    weekday = datetime.datetime.now().strftime('%A')
    workouts = {
        "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫: –†–∞—Å—Ç—è–∂–∫–∞ + 20 –º–∏–Ω—É—Ç —Ö–æ–¥—å–±—ã",
        "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫: –°–∏–ª–æ–≤–∞—è: –ø—Ä–∏—Å–µ–¥ 3x15, –º–æ—Å—Ç–∏–∫ 3x20, –ø–ª–∞–Ω–∫–∞",
        "Wednesday": "–°—Ä–µ–¥–∞: –•–∏–ø-—Ö–æ–ø 20 –º–∏–Ω + –≤–∞–∫—É—É–º 3x30 —Å–µ–∫",
        "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥: –ü—Ä–µ—Å—Å + —Ä–∞—Å—Ç—è–∂–∫–∞",
        "Friday": "–ü—è—Ç–Ω–∏—Ü–∞: –ü—Ä–æ–≥—É–ª–∫–∞ –∏–ª–∏ –æ—Ç–¥—ã—Ö",
        "Saturday": "–°—É–±–±–æ—Ç–∞: –ö–∞—Ä–¥–∏–æ + –ø—Ä–µ—Å—Å",
        "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ: –í–∞–∫—É—É–º + –∑–∞–º–µ—Ä—ã —Ç–µ–ª–∞"
    }
    plan = workouts.get(datetime.datetime.now().strftime('%A'), "–°–≤–æ–±–æ–¥–Ω—ã–π –¥–µ–Ω—å!")
    await context.bot.send_message(
    chat_id=context.job.chat_id,
    text=f"üìå –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n{plan}"
)
async def evening_checkin(context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=context.job.chat_id,
        text="–£–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Å–µ–≥–æ–¥–Ω—è?", reply_markup=markup)

async def weekly_measurement(context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=context.job.chat_id,
        text="üìè –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ! –ù–µ –∑–∞–±—É–¥—å —Å–¥–µ–ª–∞—Ç—å –∑–∞–º–µ—Ä—ã: —Ç–∞–ª–∏—è, –∂–∏–≤–æ—Ç, –±—ë–¥—Ä–∞, –≤–µ—Å")

async def log_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user.first_name
    response = update.message.text
    date = datetime.datetime.now().strftime('%Y-%m-%d')
    user_log[date] = response
    messages = {
        "‚úÖ –î–∞": ["–¢—ã –±–æ–ª—å—à–∞—è –º–æ–ª–æ–¥–µ—Ü! üåü", "–£–≤–∞–∂–µ–Ω–∏–µ! –°–∏–ª–∞ –∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ ‚Äî —Ç–≤–æ—ë –≤—Å—ë üí™", "–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å, –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–¥—ë—Ç! üî•"],
        "‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ": ["–ì–ª–∞–≤–Ω–æ–µ ‚Äî –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è üë£", "–£–∂–µ –ª—É—á—à–µ, —á–µ–º –Ω–∏—á–µ–≥–æ. –ó–∞–≤—Ç—Ä–∞ –¥–æ–∂–º—ë–º!", "–¢—ã —Å—Ç–∞—Ä–∞–µ—à—å—Å—è ‚Äî –∏ —ç—Ç–æ –≤–∏–¥–Ω–æ üëè"],
        "‚ùå –ù–µ—Ç": ["–ò–Ω–æ–≥–¥–∞ –Ω—É–∂–µ–Ω –æ—Ç–¥—ã—Ö. –ó–∞–≤—Ç—Ä–∞ ‚Äî –≤–ø–µ—Ä—ë–¥!", "–ü–∞—É–∑–∞ ‚Äî –Ω–µ –ø—Ä–æ–≤–∞–ª. –¢—ã –≤—Å—ë —Ä–∞–≤–Ω–æ –≤ –∏–≥—Ä–µ!", "–ü—Ä–æ–ø—É—Å–∫ ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ç–æ—á–∫–∞ –∑–∞–ø—è—Ç–æ–π. –ü—Ä–æ–¥–æ–ª–∂–∏–º!"]
    }
    import random
    msg = random.choice(messages.get(response, ["–ó–∞–ø–∏—Å–∞–Ω–æ ‚úÖ"]))
    await update.message.reply_text(f"{msg}")

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, log_response))

    async def scheduler():
        while True:
            now = datetime.datetime.now()
            seconds_until_9 = ((9 - now.hour) % 24) * 3600
            seconds_until_23 = ((23 - now.hour) % 24) * 3600
            seconds_until_sun_12 = (((6 - now.weekday()) % 7) * 86400 + (12 - now.hour) * 3600)

            await asyncio.sleep(5)
            app.job_queue.run_once(morning_workout, seconds_until_9, chat_id=191224401)
            app.job_queue.run_once(evening_checkin, seconds_until_23, chat_id=191224401)
            app.job_queue.run_once(weekly_measurement, seconds_until_sun_12, chat_id=191224401)

    app.run_polling()

if __name__ == "__main__":
    main()
